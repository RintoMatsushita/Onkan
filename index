import React, { useState, useEffect, useCallback } from 'react';
import { Play, Pause, RotateCcw, Volume2, Star } from 'lucide-react';
import * as Tone from 'tone';

const SoundGame = () => {
  const [gameState, setGameState] = useState('menu'); // menu, playing, gameOver
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [sequence, setSequence] = useState([]);
  const [playerSequence, setPlayerSequence] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentNote, setCurrentNote] = useState(null);
  const [feedback, setFeedback] = useState('');
  const [highScore, setHighScore] = useState(0);

  // 音符とその周波数
  const notes = [
    { id: 0, note: 'C4', freq: 261.63, color: 'bg-red-400', name: 'ド' },
    { id: 1, note: 'D4', freq: 293.66, color: 'bg-orange-400', name: 'レ' },
    { id: 2, note: 'E4', freq: 329.63, color: 'bg-yellow-400', name: 'ミ' },
    { id: 3, note: 'F4', freq: 349.23, color: 'bg-green-400', name: 'ファ' },
    { id: 4, note: 'G4', freq: 392.00, color: 'bg-blue-400', name: 'ソ' },
    { id: 5, note: 'A4', freq: 440.00, color: 'bg-indigo-400', name: 'ラ' },
    { id: 6, note: 'B4', freq: 493.88, color: 'bg-purple-400', name: 'シ' }
  ];

  // シンセサイザーの初期化
  const [synth, setSynth] = useState(null);

  useEffect(() => {
    const synthInstance = new Tone.Synth({
      oscillator: {
        type: 'sine',
      },
      envelope: {
        attack: 0.1,
        decay: 0.2,
        sustain: 0.3,
        release: 0.8,
      }
    }).toDestination();
    setSynth(synthInstance);

    return () => {
      synthInstance.dispose();
    };
  }, []);

  // 音を再生
  const playNote = useCallback(async (noteData) => {
    if (!synth) return;
    
    try {
      await Tone.start();
      synth.triggerAttackRelease(noteData.note, '0.5n');
      setCurrentNote(noteData.id);
      setTimeout(() => setCurrentNote(null), 500);
    } catch (error) {
      console.error('Audio error:', error);
    }
  }, [synth]);

  // ゲーム開始
  const startGame = () => {
    setGameState('playing');
    setScore(0);
    setLevel(1);
    setSequence([]);
    setPlayerSequence([]);
    setFeedback('準備...');
    setTimeout(() => {
      generateNewSequence([]);
    }, 1000);
  };

  // 新しいシーケンスを生成
  const generateNewSequence = (currentSequence) => {
    const newNote = Math.floor(Math.random() * notes.length);
    const newSequence = [...currentSequence, newNote];
    setSequence(newSequence);
    setPlayerSequence([]);
    setFeedback(`レベル ${Math.floor((newSequence.length - 1) / 3) + 1} - ${newSequence.length}音`);
    setTimeout(() => {
      playSequence(newSequence);
    }, 1000);
  };

  // シーケンスを再生
  const playSequence = async (seq) => {
    setIsPlaying(true);
    setFeedback('よく聞いて...');
    
    for (let i = 0; i < seq.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 200));
      await playNote(notes[seq[i]]);
      await new Promise(resolve => setTimeout(resolve, 600));
    }
    
    setIsPlaying(false);
    setFeedback('あなたの番です！');
  };

  // プレイヤーの入力処理
  const handlePlayerInput = (noteId) => {
    if (isPlaying || gameState !== 'playing') return;
    
    playNote(notes[noteId]);
    const newPlayerSequence = [...playerSequence, noteId];
    setPlayerSequence(newPlayerSequence);

    // 正解チェック
    if (newPlayerSequence[newPlayerSequence.length - 1] !== sequence[newPlayerSequence.length - 1]) {
      // 間違い
      setFeedback('残念！もう一度挑戦しましょう');
      setGameState('gameOver');
      if (score > highScore) {
        setHighScore(score);
      }
      return;
    }

    // シーケンス完了チェック
    if (newPlayerSequence.length === sequence.length) {
      const newScore = score + sequence.length * 10;
      setScore(newScore);
      setLevel(Math.floor((sequence.length) / 3) + 1);
      setFeedback('正解！次のレベルへ...');
      
      setTimeout(() => {
        generateNewSequence(sequence);
      }, 1500);
    }
  };

  // シーケンス再生
  const replaySequence = () => {
    if (isPlaying || gameState !== 'playing') return;
    playSequence(sequence);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
      <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-8 max-w-md w-full shadow-2xl border border-white/20">
        {/* ヘッダー */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2 flex items-center justify-center gap-2">
            <Volume2 className="w-8 h-8" />
            Sound Match
          </h1>
          <p className="text-white/80 text-sm">音の順番を覚えて再現しよう！</p>
        </div>

        {/* スコア表示 */}
        <div className="flex justify-between items-center mb-6 text-white">
          <div className="text-center">
            <div className="text-2xl font-bold">{score}</div>
            <div className="text-xs opacity-75">スコア</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold">{level}</div>
            <div className="text-xs opacity-75">レベル</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold flex items-center gap-1">
              <Star className="w-5 h-5 text-yellow-400" />
              {highScore}
            </div>
            <div className="text-xs opacity-75">最高</div>
          </div>
        </div>

        {/* フィードバック */}
        <div className="text-center mb-6">
          <div className="bg-black/20 rounded-lg p-3 text-white font-medium">
            {feedback || 'ゲームを開始しましょう！'}
          </div>
        </div>

        {/* メニュー画面 */}
        {gameState === 'menu' && (
          <div className="text-center space-y-4">
            <button
              onClick={startGame}
              className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-4 px-8 rounded-2xl transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2 mx-auto"
            >
              <Play className="w-6 h-6" />
              ゲーム開始
            </button>
            <div className="text-white/60 text-sm">
              流れる音楽を聞いて、同じ順番でボタンを押してください
            </div>
          </div>
        )}

        {/* ゲーム画面 */}
        {gameState === 'playing' && (
          <div className="space-y-6">
            {/* 音符ボタン */}
            <div className="grid grid-cols-4 gap-3">
              {notes.map((note) => (
                <button
                  key={note.id}
                  onClick={() => handlePlayerInput(note.id)}
                  disabled={isPlaying}
                  className={`
                    ${note.color} 
                    ${currentNote === note.id ? 'scale-110 brightness-150' : ''}
                    ${isPlaying ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105 hover:brightness-110'}
                    aspect-square rounded-2xl font-bold text-white text-lg
                    transition-all duration-200 shadow-lg border-2 border-white/20
                    active:scale-95 flex flex-col items-center justify-center
                  `}
                >
                  <div className="text-2xl">♪</div>
                  <div className="text-xs">{note.name}</div>
                </button>
              ))}
            </div>

            {/* コントロールボタン */}
            <div className="flex justify-center gap-4">
              <button
                onClick={replaySequence}
                disabled={isPlaying}
                className="bg-blue-500 hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-white font-bold py-3 px-6 rounded-xl transition-all duration-200 flex items-center gap-2"
              >
                <Volume2 className="w-5 h-5" />
                もう一度
              </button>
            </div>

            {/* プログレス */}
            <div className="bg-black/20 rounded-lg p-3">
              <div className="text-white text-sm mb-2">進行状況</div>
              <div className="flex gap-1">
                {sequence.map((_, index) => (
                  <div
                    key={index}
                    className={`h-2 flex-1 rounded ${
                      index < playerSequence.length
                        ? 'bg-green-400'
                        : 'bg-white/30'
                    }`}
                  />
                ))}
              </div>
            </div>
          </div>
        )}

        {/* ゲームオーバー画面 */}
        {gameState === 'gameOver' && (
          <div className="text-center space-y-4">
            <div className="text-white">
              <div className="text-2xl font-bold mb-2">ゲーム終了</div>
              <div className="text-lg">最終スコア: {score}</div>
              <div className="text-sm opacity-75">レベル {level} まで到達</div>
            </div>
            <button
              onClick={startGame}
              className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-3 px-6 rounded-xl transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2 mx-auto"
            >
              <RotateCcw className="w-5 h-5" />
              もう一度
            </button>
            <button
              onClick={() => setGameState('menu')}
              className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-xl transition-all duration-200 flex items-center gap-2 mx-auto"
            >
              メニューに戻る
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default SoundGame;
